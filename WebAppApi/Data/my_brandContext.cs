// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using WebAppApi.Models;

namespace WebAppApi.Data
{
    public partial class my_brandContext : DbContext
    {
        public my_brandContext()
        {
        }

        public my_brandContext(DbContextOptions<my_brandContext> options)
            : base(options)
        {
        }

        public virtual DbSet<BillDetailsTb> BillDetailsTbs { get; set; }
        public virtual DbSet<BillsTb> BillsTbs { get; set; }
        public virtual DbSet<CatRmTb> CatRmTbs { get; set; }
        public virtual DbSet<CategoreisWithAmount> CategoreisWithAmounts { get; set; }
        public virtual DbSet<CategoriesTb> CategoriesTbs { get; set; }
        public virtual DbSet<ClientBalanceTb> ClientBalanceTbs { get; set; }
        public virtual DbSet<ClientDeleted> ClientDeleteds { get; set; }
        public virtual DbSet<ClientTb> ClientTbs { get; set; }
        public virtual DbSet<CurrencyTb> CurrencyTbs { get; set; }
        public virtual DbSet<RoleTb> RoleTbs { get; set; }
        public virtual DbSet<RowMaterialsTb> RowMaterialsTbs { get; set; }
        public virtual DbSet<SalesAmount> SalesAmounts { get; set; }
        public virtual DbSet<Store> Stores { get; set; }
        public virtual DbSet<StoreBalanceTb> StoreBalanceTbs { get; set; }
        public virtual DbSet<Total> Totals { get; set; }
        public virtual DbSet<TotalClientSale> TotalClientSales { get; set; }
        public virtual DbSet<UserBill> UserBills { get; set; }
        public virtual DbSet<UserRoleTb> UserRoleTbs { get; set; }
        public virtual DbSet<UserTb> UserTbs { get; set; }
        public virtual DbSet<UserTest> UserTests { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("Arabic_CI_AS");

            modelBuilder.Entity<BillDetailsTb>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bill_details_tb");

                entity.Property(e => e.BillId).HasColumnName("bill_id");

                entity.Property(e => e.CatId).HasColumnName("cat_id");

                entity.Property(e => e.Note)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("note");

                entity.Property(e => e.Total)
                    .HasColumnType("numeric(8, 3)")
                    .HasColumnName("total");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.Bill)
                    .WithMany()
                    .HasForeignKey(d => d.BillId)
                    .HasConstraintName("bill_details_fk");

                entity.HasOne(d => d.Cat)
                    .WithMany()
                    .HasForeignKey(d => d.CatId)
                    .HasConstraintName("bill_details_cat_fk");

                entity.HasOne(d => d.User)
                    .WithMany()
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("bill_details_user_fk");
            });

            modelBuilder.Entity<BillsTb>(entity =>
            {
                entity.HasKey(e => e.BillId)
                    .HasName("bill_pk");

                entity.ToTable("bills_tb");

                entity.Property(e => e.BillId).HasColumnName("bill_id");

                entity.Property(e => e.BillDate)
                    .HasColumnType("date")
                    .HasColumnName("bill_date");

                entity.Property(e => e.BillType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("bill_type");

                entity.Property(e => e.ClientId).HasColumnName("client_id");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.BillsTbs)
                    .HasForeignKey(d => d.ClientId)
                    .HasConstraintName("bill_client_fk");
            });

            modelBuilder.Entity<CatRmTb>(entity =>
            {
                entity.HasKey(e => new { e.CatId, e.RmId })
                    .HasName("cat_rm_pk");

                entity.ToTable("cat_rm_tb");

                entity.Property(e => e.CatId).HasColumnName("cat_id");

                entity.Property(e => e.RmId).HasColumnName("rm_id");

                entity.Property(e => e.Note)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("note");

                entity.HasOne(d => d.Cat)
                    .WithMany(p => p.CatRmTbs)
                    .HasForeignKey(d => d.CatId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("cat_fk");

                entity.HasOne(d => d.Rm)
                    .WithMany(p => p.CatRmTbs)
                    .HasForeignKey(d => d.RmId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rm_fk");
            });

            modelBuilder.Entity<CategoreisWithAmount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("categoreis_with_amount");

                entity.Property(e => e.CatId).HasColumnName("cat_id");

                entity.Property(e => e.CatName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cat_name");

                entity.Property(e => e.SaleAmount)
                    .HasColumnType("numeric(16, 5)")
                    .HasColumnName("sale_amount");
            });

            modelBuilder.Entity<CategoriesTb>(entity =>
            {
                entity.HasKey(e => e.CatId)
                    .HasName("cat_pk");

                entity.ToTable("categories_tb");

                entity.Property(e => e.CatId).HasColumnName("cat_id");

                entity.Property(e => e.CatName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cat_name");

                entity.Property(e => e.Price)
                    .HasColumnType("numeric(7, 2)")
                    .HasColumnName("price");

                entity.Property(e => e.Quentity).HasColumnName("quentity");

                entity.Property(e => e.StoreDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("store_date");

                entity.Property(e => e.StoreId).HasColumnName("store_id");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.CategoriesTbs)
                    .HasForeignKey(d => d.StoreId)
                    .HasConstraintName("cat_store_fk");
            });

            modelBuilder.Entity<ClientBalanceTb>(entity =>
            {
                entity.HasKey(e => e.ClientBalanceId)
                    .HasName("client_balance_pk");

                entity.ToTable("client_balance_tb");

                entity.Property(e => e.ClientBalanceId).HasColumnName("client_balance_id");

                entity.Property(e => e.Balance)
                    .HasColumnType("numeric(7, 2)")
                    .HasColumnName("balance");

                entity.Property(e => e.ClientId).HasColumnName("client_id");

                entity.Property(e => e.CurrencyId).HasColumnName("currency_id");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientBalanceTbs)
                    .HasForeignKey(d => d.ClientId)
                    .HasConstraintName("client_fk");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.ClientBalanceTbs)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("currency_fk");
            });

            modelBuilder.Entity<ClientDeleted>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("client_deleted");

                entity.Property(e => e.ClientId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("client_id");

                entity.Property(e => e.ClientName)
                    .HasMaxLength(10)
                    .HasColumnName("client_name");
            });

            modelBuilder.Entity<ClientTb>(entity =>
            {
                entity.HasKey(e => e.ClientId)
                    .HasName("client_pk");

                entity.ToTable("client_tb");

                entity.HasIndex(e => e.Email, "UQ__client_t__AB6E61640463BDE0")
                    .IsUnique();

                entity.Property(e => e.ClientId).HasColumnName("client_id");

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.ClientName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("client_name");

                entity.Property(e => e.Email)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.Phone)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("phone");
            });

            modelBuilder.Entity<CurrencyTb>(entity =>
            {
                entity.HasKey(e => e.CurrencyId)
                    .HasName("currency_pk");

                entity.ToTable("currency_tb");

                entity.Property(e => e.CurrencyId).HasColumnName("currency_id");

                entity.Property(e => e.CurrencyName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("currency_name");
            });

            modelBuilder.Entity<RoleTb>(entity =>
            {
                entity.HasKey(e => e.RoleId)
                    .HasName("role_pk");

                entity.ToTable("role_tb");

                entity.Property(e => e.RoleId).HasColumnName("role_id");

                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("role_name");

                entity.Property(e => e.RoleState).HasColumnName("role_state");
            });

            modelBuilder.Entity<RowMaterialsTb>(entity =>
            {
                entity.HasKey(e => e.RmId)
                    .HasName("rm_pk");

                entity.ToTable("row_materials_tb");

                entity.Property(e => e.RmId).HasColumnName("rm_id");

                entity.Property(e => e.Quentity).HasColumnName("quentity");

                entity.Property(e => e.RmName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("rm_name");

                entity.Property(e => e.StoreId).HasColumnName("store_id");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.RowMaterialsTbs)
                    .HasForeignKey(d => d.StoreId)
                    .HasConstraintName("rm_store_fk");
            });

            modelBuilder.Entity<SalesAmount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("sales_amount");

                entity.Property(e => e.CatId).HasColumnName("cat_id");

                entity.Property(e => e.CatName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cat_name");

                entity.Property(e => e.SaleAmount)
                    .HasColumnType("numeric(38, 5)")
                    .HasColumnName("sale_amount");
            });

            modelBuilder.Entity<Store>(entity =>
            {
                entity.ToTable("store");

                entity.Property(e => e.StoreId).HasColumnName("store_id");

                entity.Property(e => e.Location)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("location");

                entity.Property(e => e.StoreName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("store_name");
            });

            modelBuilder.Entity<StoreBalanceTb>(entity =>
            {
                entity.HasKey(e => e.StoreBalanceId)
                    .HasName("store_balance_pk");

                entity.ToTable("store_balance_tb");

                entity.Property(e => e.StoreBalanceId).HasColumnName("store_balance_id");

                entity.Property(e => e.CurrencyId).HasColumnName("currency_id");

                entity.Property(e => e.StoreId).HasColumnName("store_id");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.StoreBalanceTbs)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("store_balance_curr_fk");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.StoreBalanceTbs)
                    .HasForeignKey(d => d.StoreId)
                    .HasConstraintName("store_balane_fk");
            });

            modelBuilder.Entity<Total>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("total");

                entity.Property(e => e.BillDate)
                    .HasColumnType("date")
                    .HasColumnName("bill_date");

                entity.Property(e => e.BillId).HasColumnName("bill_id");

                entity.Property(e => e.CatName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cat_name");

                entity.Property(e => e.ClientName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("client_name");
            });

            modelBuilder.Entity<TotalClientSale>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("total_client_sales");

                entity.Property(e => e.BillDate)
                    .HasColumnType("date")
                    .HasColumnName("bill_date");

                entity.Property(e => e.BillId).HasColumnName("bill_id");

                entity.Property(e => e.CatName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cat_name");

                entity.Property(e => e.ClientName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("client_name");
            });

            modelBuilder.Entity<UserBill>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("user_bills");

                entity.Property(e => e.BillId).HasColumnName("bill_id");

                entity.Property(e => e.UserName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("user_name");
            });

            modelBuilder.Entity<UserRoleTb>(entity =>
            {
                entity.HasKey(e => e.UserRoleId)
                    .HasName("user_role_pk");

                entity.ToTable("user_role_tb");

                entity.Property(e => e.UserRoleId).HasColumnName("user_role_id");

                entity.Property(e => e.RoleId).HasColumnName("role_id");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UserRoleTbs)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("role_fk");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserRoleTbs)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("user_fk");
            });

            modelBuilder.Entity<UserTb>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("user_pk");

                entity.ToTable("user_tb");

                entity.Property(e => e.UserId)
                    .ValueGeneratedNever()
                    .HasColumnName("user_id");

                entity.Property(e => e.LoginName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("login_name");

                entity.Property(e => e.UserName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("user_name");

                entity.Property(e => e.UserPassword)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("user_password");
            });

            modelBuilder.Entity<UserTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("user_test");

                entity.Property(e => e.AuditAction)
                    .HasColumnType("text")
                    .HasColumnName("audit_action");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}